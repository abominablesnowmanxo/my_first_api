{
    "openapi": "3.0.0",
    "info": {
        "description": "Person API",
        "version": "1.0.0",
        "title": "Person API",
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        }
    },
    "servers": [
        {
            "url": "/"
        }
    ],
    "components": {
        "schemas": {
            "Person": {
                "type": "object",
                "properties": {
                    "firstname": {
                        "type": "string"
                    },
                    "lastname": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "age": {
                        "type": "integer"
                    },
                    "bio": {
                        "type": "string"
                    }
                },
                "required": [
                  "firstname",
                  "lastname",
                  "email"
                ]
            },
            "Error": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    }
                },
                "required": [
                    "code",
                    "message"
                ]
            }
        },
        "requestBodies": {
            "PersonBody": {
                "description": "A JSON object containing person information",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Person"
                        },
                        "example": {
                            "firstname": "John",
                            "lastname": "Macclane",
                            "email": "yohoho@nakatomi.com",
                            "age": 50,
                            "bio": "Drinker"
                        }
                    }
                }
            }
        },
        "responses": {
            "NotFound": {
                "description": "person not found",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Error"
                        }
                    }
                }
            }
        }
    },
    "paths": {
        "/persons": {
            "get": {
                "summary": "Get all persons",
                "tags": [
                    "Persons"
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            },
            "post": {
                "summary": "Create new person",
                "tags": [
                    "Persons"
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/PersonBody"
                },
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                }
            }
        },
        "/persons/{id}": {
            "get": {
                "summary": "Get a person by id",
                "tags": [
                    "Persons"
                ],
                "parameters": [
                    {
                    "name": "id",
                    "in": "path",
                    "description": "Person id",
                    "required": true,
                    "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Person"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    }
                }
            },
            "put": {
                "summary": "Update a person by id",
                "tags": [
                    "Persons"
                ],
                "parameters": [
                    {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "description": "Person id",
                    "type": "integer"
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/PersonBody"
                },
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/components/schemas/Person"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete a person by id",
                "tags": [
                    "Persons"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Person id",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description":"Bad request"
                    },
                    "404": {
                        "description":"Not Found"
                    }
                }

            }
        }
    }
}
